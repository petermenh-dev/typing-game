{"version":3,"sources":["components/Dictionary.js","components/Dictionaries.js","components/PlayArea.js","App.js","reportWebVitals.js","index.js"],"names":["Dictionary","dict","onSelectDict","className","onClick","id","name","Dictionaries","dicts","map","PlayArea","clearSelectDict","useState","words","split","wordArray","Math","floor","random","length","currentWord","setCurrentWord","longestStreak","setLongestStreak","currentStreak","setCurrentStreak","setNewWord","useEffect","type","placeholder","onKeyDown","e","key","target","value","toLowerCase","App","setDicts","selectedDict","setSelectedDict","a","fetchDicts","dictsFromServer","getDicts","fetch","res","json","data","Object","keys","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.947efa4f.chunk.js","sourcesContent":["const Dictionary = ({ dict, onSelectDict }) => {\n  const dictSelected = () => {\n    console.log(dict.name);\n  };\n\n  return (\n    <div className='dictionary-item'>\n      <h2 onClick={() => onSelectDict(dict.id)}>{dict.name}</h2>\n    </div>\n  );\n};\n\nexport default Dictionary;\n","import Dictionary from \"./Dictionary\";\n\nconst Dictionaries = ({ dicts, onSelectDict }) => {\n  return (\n    <div>\n      {dicts.map((dict) => (\n        <Dictionary key={dict.id} dict={dict} onSelectDict={onSelectDict} />\n      ))}\n    </div>\n  );\n};\n\nexport default Dictionaries;\n","import { useState, useEffect } from \"react\";\nimport { FaArrowCircleLeft } from \"react-icons/fa\";\nimport WordDisplay from \"./WordDisplay\";\nimport WordInput from \"./WordInput\";\n\nconst PlayArea = ({ dict, clearSelectDict }) => {\n  const [wordArray, setWordArray] = useState(dict.words.split(\",\"));\n  const [currentWord, setCurrentWord] = useState(\n    wordArray[Math.floor(Math.random() * wordArray.length)]\n  );\n  const [longestStreak, setLongestStreak] = useState(0);\n  const [currentStreak, setCurrentStreak] = useState(0);\n\n  //Set new current word\n  const setNewWord = () => {\n    setCurrentWord(wordArray[Math.floor(Math.random() * wordArray.length)]);\n  };\n\n  //Request new word\n  const requestNewWord = () => {\n    setCurrentStreak(0);\n    setNewWord();\n  };\n\n  //Handle key press\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      if (e.target.value.toLowerCase() == currentWord.toLowerCase()) {\n        setCurrentStreak(currentStreak + 1);\n      } else {\n        setCurrentStreak(0);\n      }\n      e.target.value = \"\";\n      setNewWord();\n    }\n  };\n\n  useEffect(() => {\n    if (currentStreak >= longestStreak) {\n      setLongestStreak(currentStreak);\n    }\n  }, [currentStreak]);\n\n  return (\n    <div className=\"play-container\">\n      <div className=\"btn go-back-btn\" onClick={() => clearSelectDict()}>\n        <FaArrowCircleLeft /> Go Back\n      </div>\n      <div className=\"text category\">\n        <span>Category: </span>\n        <span>{dict.name}</span>\n      </div>\n      <div className=\"stats\">\n        <div className=\"text high-streak\">\n          <span>Longest Streak: </span>\n          <span>{longestStreak}</span>\n        </div>\n        <div className=\"text current-streak\">\n          <span>Current Streak: </span>\n          <span>{currentStreak}</span>\n        </div>\n      </div>\n      <div className=\"text current-word\">{currentWord}</div>\n      <input\n        className=\"text-input\"\n        type=\"text\"\n        placeholder=\"...type here...\"\n        onKeyDown={handleKeyDown}\n      />\n      <div className=\"btn new-word-btn\" onClick={requestNewWord}>\n        Request New Word\n        <span className=\"tooltiptext\">This will reset your current streak</span>\n      </div>\n\n      {/* <WordDisplay currentWord={currentWord} />\n      <WordInput setWord={setNewWord} /> */}\n    </div>\n  );\n};\n\nexport default PlayArea;\n","import { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Dictionaries from \"./components/Dictionaries\";\nimport PlayArea from \"./components/PlayArea\";\n\nconst App = () => {\n  const [dicts, setDicts] = useState([]);\n  const [selectedDict, setSelectedDict] = useState({});\n\n  useEffect(() => {\n    const getDicts = async () => {\n      const dictsFromServer = await fetchDicts();\n      setDicts(dictsFromServer);\n    };\n\n    getDicts();\n  }, []);\n\n  //Fetch dicts\n  const fetchDicts = async () => {\n    const res = await fetch(\"http://localhost:5000/dicts\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  //Fetch dictionary\n  const fetchDict = async (id) => {\n    const res = await fetch(`http://localhost:5000/dicts/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  //Select dictionary to play\n  const selectDict = (id) => {\n    setSelectedDict(dicts.filter((dict) => dict.id === id)[0]);\n  };\n\n  //Clear selected dictionary\n  const clearSelectDict = () => {\n    setSelectedDict({});\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"background-scrim\"></div>\n      {dicts.length > 0 && Object.keys(selectedDict).length == 0 && (\n        <div className=\"dictionary-lists\">\n          <h1>Choose a Category</h1>\n          <Dictionaries dicts={dicts} onSelectDict={selectDict} />\n        </div>\n      )}\n      {Object.keys(selectedDict).length > 0 && (\n        <PlayArea dict={selectedDict} clearSelectDict={clearSelectDict} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\n// import './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}